.section text
_start:
    ; Bitwise AND operations - clear specific bits
    mov q0, 0xFF        ; q0 = 255 (0b11111111)
    mov q1, 0x0F        ; q1 = 15  (0b00001111)
    and q2, q0, q1      ; q2 = 255 & 15 = 15 (keeps lower 4 bits)

    ; Bitwise OR operations - set specific bits
    mov q3, 0xF0        ; q3 = 240 (0b11110000)
    mov q4, 0x0F        ; q4 = 15  (0b00001111)
    or q5, q3, q4       ; q5 = 240 | 15 = 255 (combines both patterns)

    ; Bitwise XOR operations - toggle bits
    mov q6, 0xAA        ; q6 = 170 (0b10101010)
    mov q7, 0x55        ; q7 = 85  (0b01010101)
    xor q8, q6, q7      ; q8 = 170 ^ 85 = 255 (all bits flipped)

    ; XOR with itself (common way to zero a register)
    xor q9, q6, q6      ; q9 = 170 ^ 170 = 0

    ; Left shift operations - multiply by powers of 2
    mov q10, 1          ; q10 = 1
    shl q11, q10, 3     ; q11 = 1 << 3 = 8 (multiply by 8)
    shl q12, q10, 7     ; q12 = 1 << 7 = 128 (multiply by 128)

    ; Right shift operations - divide by powers of 2
    mov q13, 64         ; q13 = 64
    shr q14, q13, 2     ; q14 = 64 >> 2 = 16 (divide by 4)
    shr q15, q13, 6     ; q15 = 64 >> 6 = 1 (divide by 64)

    ; Bit masking example - extract specific bit fields
    mov d0, 0x12345678  ; d0 = arbitrary 32-bit value
    and d1, d0, 0xFF    ; d1 = extract lower 8 bits (0x78)
    shr d2, d0, 8       ; d2 = shift right 8 bits
    and d3, d2, 0xFF    ; d3 = extract next 8 bits (0x56)

    ; Setting and clearing individual bits
    mov w0, 0x1000      ; w0 = 4096 (bit 12 set)
    or w1, w0, 0x0001   ; w1 = set bit 0 (4097)
    and w2, w1, 0xFFFE  ; w2 = clear bit 0 (4096)

    ; Checking if a number is even or odd using AND
    mov b0, 42          ; b0 = 42 (even number)
    and b1, b0, 1       ; b1 = 42 & 1 = 0 (even numbers have bit 0 clear)

    mov b2, 43          ; b2 = 43 (odd number)
    and b3, b2, 1       ; b3 = 43 & 1 = 1 (odd numbers have bit 0 set)

    ; Bit rotation simulation using shifts and OR
    mov b4, 0x81        ; b4 = 129 (0b10000001)
    shl b5, b4, 1       ; b5 = shift left (0b00000010, but overflow bit lost)
    shr b6, b4, 7       ; b6 = get the bit that would overflow (0b00000001)
    or b7, b5, b6       ; b7 = combine to simulate rotate left

    ; Program termination
    hlt                 ; halt the virtual machine

.section data
    ; Bit manipulation reference data
bit_patterns:
    db 0x01, 0x02, 0x04, 0x08    ; powers of 2 (bits 0-3)
    db 0x10, 0x20, 0x40, 0x80    ; powers of 2 (bits 4-7)

masks:
    db 0x0F, 0xF0, 0xFF, 0x00    ; common bit masks
