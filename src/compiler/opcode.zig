const std = @import("std");

pub const Opcode = enum(u8) {
    nop,
    mov_reg_reg,
    mov_reg_imm,
    ldr,
    str,
    sti,
    push_imm,
    push_reg,
    push_addr,
    pop_reg,
    pop_addr,
    add_reg_reg_reg,
    add_reg_reg_imm,
    sub_reg_reg_reg,
    sub_reg_reg_imm,
    mul_reg_reg_reg,
    mul_reg_reg_imm,
    div_reg_reg_reg,
    div_reg_reg_imm,
    and_reg_reg_reg,
    and_reg_reg_imm,
    or_reg_reg_reg,
    or_reg_reg_imm,
    xor_reg_reg_reg,
    xor_reg_reg_imm,
    shl_reg_reg_reg,
    shl_reg_reg_imm,
    shr_reg_reg_reg,
    shr_reg_reg_imm,
    cmp_reg_imm,
    cmp_reg_reg,
    // TODO: cmp_reg_addr, cmp_imm_imm, and cmp_imm_addr
    jmp_imm,
    jmp_reg,
    jeq_imm,
    jeq_reg,
    jne_imm,
    jne_reg,
    jlt_imm,
    jlt_reg,
    jgt_imm,
    jgt_reg,
    jle_imm,
    jle_reg,
    jge_imm,
    jge_reg,
    call_imm,
    call_reg,
    ret,
    // TODO: inc -> inc_reg, dec -> dec_reg, neg -> neg_reg, inc_addr, dec_addr, neg_addr
    inc,
    dec,
    neg,
    syscall,
    hlt,

    pub fn intoU8(self: Opcode) u8 {
        return @intFromEnum(self);
    }

    pub fn fromU8(value: u8) !Opcode {
        return switch (value) {
            @intFromEnum(Opcode.nop) => .nop,
            @intFromEnum(Opcode.mov_reg_reg) => .mov_reg_reg,
            @intFromEnum(Opcode.mov_reg_imm) => .mov_reg_imm,
            @intFromEnum(Opcode.ldr) => .ldr,
            @intFromEnum(Opcode.str) => .str,
            @intFromEnum(Opcode.sti) => .sti,
            @intFromEnum(Opcode.push_imm) => .push_imm,
            @intFromEnum(Opcode.push_reg) => .push_reg,
            @intFromEnum(Opcode.push_addr) => .push_addr,
            @intFromEnum(Opcode.pop_reg) => .pop_reg,
            @intFromEnum(Opcode.pop_addr) => .pop_addr,
            @intFromEnum(Opcode.add_reg_reg_reg) => .add_reg_reg_reg,
            @intFromEnum(Opcode.add_reg_reg_imm) => .add_reg_reg_imm,
            @intFromEnum(Opcode.sub_reg_reg_reg) => .sub_reg_reg_reg,
            @intFromEnum(Opcode.sub_reg_reg_imm) => .sub_reg_reg_imm,
            @intFromEnum(Opcode.mul_reg_reg_reg) => .mul_reg_reg_reg,
            @intFromEnum(Opcode.mul_reg_reg_imm) => .mul_reg_reg_imm,
            @intFromEnum(Opcode.div_reg_reg_reg) => .div_reg_reg_reg,
            @intFromEnum(Opcode.div_reg_reg_imm) => .div_reg_reg_imm,
            @intFromEnum(Opcode.and_reg_reg_reg) => .and_reg_reg_reg,
            @intFromEnum(Opcode.and_reg_reg_imm) => .and_reg_reg_imm,
            @intFromEnum(Opcode.or_reg_reg_reg) => .or_reg_reg_reg,
            @intFromEnum(Opcode.or_reg_reg_imm) => .or_reg_reg_imm,
            @intFromEnum(Opcode.xor_reg_reg_reg) => .xor_reg_reg_reg,
            @intFromEnum(Opcode.xor_reg_reg_imm) => .xor_reg_reg_imm,
            @intFromEnum(Opcode.shl_reg_reg_reg) => .shl_reg_reg_reg,
            @intFromEnum(Opcode.shl_reg_reg_imm) => .shl_reg_reg_imm,
            @intFromEnum(Opcode.shr_reg_reg_reg) => .shr_reg_reg_reg,
            @intFromEnum(Opcode.shr_reg_reg_imm) => .shr_reg_reg_imm,
            @intFromEnum(Opcode.cmp_reg_imm) => .cmp_reg_imm,
            @intFromEnum(Opcode.cmp_reg_reg) => .cmp_reg_reg,
            @intFromEnum(Opcode.jmp_imm) => .jmp_imm,
            @intFromEnum(Opcode.jmp_reg) => .jmp_reg,
            @intFromEnum(Opcode.jeq_imm) => .jeq_imm,
            @intFromEnum(Opcode.jeq_reg) => .jeq_reg,
            @intFromEnum(Opcode.jne_imm) => .jne_imm,
            @intFromEnum(Opcode.jne_reg) => .jne_reg,
            @intFromEnum(Opcode.jlt_imm) => .jlt_imm,
            @intFromEnum(Opcode.jlt_reg) => .jlt_reg,
            @intFromEnum(Opcode.jgt_imm) => .jgt_imm,
            @intFromEnum(Opcode.jgt_reg) => .jgt_reg,
            @intFromEnum(Opcode.jle_imm) => .jle_imm,
            @intFromEnum(Opcode.jle_reg) => .jle_reg,
            @intFromEnum(Opcode.jge_imm) => .jge_imm,
            @intFromEnum(Opcode.jge_reg) => .jge_reg,
            @intFromEnum(Opcode.call_imm) => .call_imm,
            @intFromEnum(Opcode.call_reg) => .call_reg,
            @intFromEnum(Opcode.ret) => .ret,
            @intFromEnum(Opcode.inc) => .inc,
            @intFromEnum(Opcode.dec) => .dec,
            @intFromEnum(Opcode.neg) => .neg,
            @intFromEnum(Opcode.syscall) => .syscall,
            @intFromEnum(Opcode.hlt) => .hlt,
            else => error.InvalidOpcode,
        };
    }

    pub fn format(
        self: Opcode,
        writer: *std.Io.Writer,
    ) std.Io.Writer.Error!void {
        try writer.print("{s}", switch (self) {
            .nop => "nop",
            .mov_reg_reg, .mov_reg_imm => "mov",
            .ldr => "ldr",
            .str => "str",
            .push_imm, .push_reg, .push_addr => "push",
            .pop_reg, .pop_addr => "pop",
            .add_reg_reg_reg, .add_reg_reg_imm => "add",
            .sub_reg_reg_reg, .sub_reg_reg_imm => "sub",
            .mul_reg_reg_reg, .mul_reg_reg_imm => "mul",
            .div_reg_reg_reg, .div_reg_reg_imm => "div",
            .and_reg_reg_reg, .and_reg_reg_imm => "and",
            .or_reg_reg_reg, .or_reg_reg_imm => "or",
            .xor_reg_reg_reg, .xor_reg_reg_imm => "xor",
            .shl_reg_reg_reg, .shl_reg_reg_imm => "shl",
            .shr_reg_reg_reg, .shr_reg_reg_imm => "shr",
            .cmp_reg_imm, .cmp_reg_reg => "cmp",
            .jmp_imm, .jmp_reg => "jmp",
            .jeq_imm, .jeq_reg => "jeq",
            .jne_imm, .jne_reg => "jne",
            .jlt_imm, .jlt_reg => "jlt",
            .jgt_imm, .jgt_reg => "jgt",
            .jle_imm, .jle_reg => "jle",
            .jge_imm, .jge_reg => "jge",
            .call_imm, .call_reg => "call",
            .ret => "ret",
            .inc => "inc",
            .dec => "dec",
            .neg => "neg",
            .syscall => "syscall",
            .hlt => "hlt",
        });
    }
};
