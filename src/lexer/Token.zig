const std = @import("std");
const Span = @import("../Span.zig");

const Token = @This();

pub const Kind = enum {
    eof,
    illegal,
    newline,

    identifier,
    register,
    integer,
    hexadecimal,
    binary,
    octal,
    float,
    string,
    data_size,
    section_name,

    colon,
    comma,
    plus,
    minus,
    asterisk,
    slash,
    pipe,
    ampersand,
    caret,
    lparen,
    rparen,
    lbracket,
    rbracket,

    kw_error,
    kw_define,
    kw_include,
    kw_ifdef,
    kw_ifndef,
    kw_else,
    kw_endif,

    kw_section,
    kw_entry,
    kw_ascii,
    kw_asciz,

    kw_nop,
    kw_mov,
    kw_ldr,
    kw_str,
    kw_sti,
    kw_push,
    kw_pop,
    kw_add,
    kw_sub,
    kw_mul,
    kw_div,
    kw_and,
    kw_or,
    kw_xor,
    kw_shl,
    kw_shr,
    kw_cmp,
    kw_jmp,
    kw_jeq,
    kw_jne,
    kw_jlt,
    kw_jgt,
    kw_jle,
    kw_jge,
    kw_call,
    kw_ret,
    kw_inc,
    kw_dec,
    kw_neg,
    kw_syscall,
    kw_hlt,

    kw_db,
    kw_resb,
};

kind: Kind,
literal: []const u8,
span: Span,

pub fn init(kind: Kind, literal: []const u8, span: Span) Token {
    return Token{
        .kind = kind,
        .literal = literal,
        .span = span,
    };
}

pub fn format(
    self: Token,
    writer: *std.Io.Writer,
) std.Io.Writer.Error!void {
    try writer.print(
        ".{{ .kind = .{s}, .literal = \"{s}\", .span = {any} }}",
        .{ @tagName(self.kind), self.literal, self.span },
    );
}

const keywords = std.StaticStringMap(Kind).initComptime(.{
    .{ "#error", Kind.kw_error },
    .{ "#define", Kind.kw_define },
    .{ "#include", Kind.kw_include },
    .{ "#ifdef", Kind.kw_ifdef },
    .{ "#ifndef", Kind.kw_ifndef },
    .{ "#else", Kind.kw_else },
    .{ "#endif", Kind.kw_endif },
    // Assembler Directives
    .{ ".section", Kind.kw_section },
    .{ ".entry", Kind.kw_entry },
    .{ ".ascii", Kind.kw_ascii },
    .{ ".asciz", Kind.kw_asciz },
    // Instructions
    .{ "nop", Kind.kw_nop },
    .{ "mov", Kind.kw_mov },
    .{ "ldr", Kind.kw_ldr },
    .{ "str", Kind.kw_str },
    .{ "sti", Kind.kw_sti },
    .{ "push", Kind.kw_push },
    .{ "pop", Kind.kw_pop },
    .{ "add", Kind.kw_add },
    .{ "sub", Kind.kw_sub },
    .{ "mul", Kind.kw_mul },
    .{ "div", Kind.kw_div },
    .{ "and", Kind.kw_and },
    .{ "or", Kind.kw_or },
    .{ "xor", Kind.kw_xor },
    .{ "shl", Kind.kw_shl },
    .{ "shr", Kind.kw_shr },
    .{ "cmp", Kind.kw_cmp },
    .{ "jmp", Kind.kw_jmp },
    .{ "jeq", Kind.kw_jeq },
    .{ "jne", Kind.kw_jne },
    .{ "jlt", Kind.kw_jlt },
    .{ "jgt", Kind.kw_jgt },
    .{ "jle", Kind.kw_jle },
    .{ "jge", Kind.kw_jge },
    .{ "call", Kind.kw_call },
    .{ "ret", Kind.kw_ret },
    .{ "inc", Kind.kw_inc },
    .{ "dec", Kind.kw_dec },
    .{ "neg", Kind.kw_neg },
    .{ "syscall", Kind.kw_syscall },
    .{ "hlt", Kind.kw_hlt },
    // Data Declaration Directives
    .{ "db", Kind.kw_db },
    .{ "resb", Kind.kw_resb },
    // Section Names
    .{ "text", Kind.section_name },
    .{ "data", Kind.section_name },
    // Registers b0..b15
    .{ "b0", Kind.register },
    .{ "b1", Kind.register },
    .{ "b2", Kind.register },
    .{ "b3", Kind.register },
    .{ "b4", Kind.register },
    .{ "b5", Kind.register },
    .{ "b6", Kind.register },
    .{ "b7", Kind.register },
    .{ "b8", Kind.register },
    .{ "b9", Kind.register },
    .{ "b10", Kind.register },
    .{ "b11", Kind.register },
    .{ "b12", Kind.register },
    .{ "b13", Kind.register },
    .{ "b14", Kind.register },
    .{ "b15", Kind.register },
    // Registers w0..w15
    .{ "w0", Kind.register },
    .{ "w1", Kind.register },
    .{ "w2", Kind.register },
    .{ "w3", Kind.register },
    .{ "w4", Kind.register },
    .{ "w5", Kind.register },
    .{ "w6", Kind.register },
    .{ "w7", Kind.register },
    .{ "w8", Kind.register },
    .{ "w9", Kind.register },
    .{ "w10", Kind.register },
    .{ "w11", Kind.register },
    .{ "w12", Kind.register },
    .{ "w13", Kind.register },
    .{ "w14", Kind.register },
    .{ "w15", Kind.register },
    // Registers d0..d15
    .{ "d0", Kind.register },
    .{ "d1", Kind.register },
    .{ "d2", Kind.register },
    .{ "d3", Kind.register },
    .{ "d4", Kind.register },
    .{ "d5", Kind.register },
    .{ "d6", Kind.register },
    .{ "d7", Kind.register },
    .{ "d8", Kind.register },
    .{ "d9", Kind.register },
    .{ "d10", Kind.register },
    .{ "d11", Kind.register },
    .{ "d12", Kind.register },
    .{ "d13", Kind.register },
    .{ "d14", Kind.register },
    .{ "d15", Kind.register },
    // Registers q0..q15
    .{ "q0", Kind.register },
    .{ "q1", Kind.register },
    .{ "q2", Kind.register },
    .{ "q3", Kind.register },
    .{ "q4", Kind.register },
    .{ "q5", Kind.register },
    .{ "q6", Kind.register },
    .{ "q7", Kind.register },
    .{ "q8", Kind.register },
    .{ "q9", Kind.register },
    .{ "q10", Kind.register },
    .{ "q11", Kind.register },
    .{ "q12", Kind.register },
    .{ "q13", Kind.register },
    .{ "q14", Kind.register },
    .{ "q15", Kind.register },
    // Registers ff0..ff15
    .{ "ff0", Kind.register },
    .{ "ff1", Kind.register },
    .{ "ff2", Kind.register },
    .{ "ff3", Kind.register },
    .{ "ff4", Kind.register },
    .{ "ff5", Kind.register },
    .{ "ff6", Kind.register },
    .{ "ff7", Kind.register },
    .{ "ff8", Kind.register },
    .{ "ff9", Kind.register },
    .{ "ff10", Kind.register },
    .{ "ff11", Kind.register },
    .{ "ff12", Kind.register },
    .{ "ff13", Kind.register },
    .{ "ff14", Kind.register },
    .{ "ff15", Kind.register },
    // Registers dd0..dd15
    .{ "dd0", Kind.register },
    .{ "dd1", Kind.register },
    .{ "dd2", Kind.register },
    .{ "dd3", Kind.register },
    .{ "dd4", Kind.register },
    .{ "dd5", Kind.register },
    .{ "dd6", Kind.register },
    .{ "dd7", Kind.register },
    .{ "dd8", Kind.register },
    .{ "dd9", Kind.register },
    .{ "dd10", Kind.register },
    .{ "dd11", Kind.register },
    .{ "dd12", Kind.register },
    .{ "dd13", Kind.register },
    .{ "dd14", Kind.register },
    .{ "dd15", Kind.register },
    // Special Registers
    .{ "ip", Kind.register },
    .{ "sp", Kind.register },
    .{ "bp", Kind.register },
    // Data Sizes
    .{ "byte", Kind.data_size },
    .{ "word", Kind.data_size },
    .{ "dword", Kind.data_size },
    .{ "qword", Kind.data_size },
    .{ "float", Kind.data_size },
    .{ "double", Kind.data_size },
});

pub fn lookupIdent(ident: []const u8) Kind {
    if (keywords.get(ident)) |kind| {
        return kind;
    } else {
        return .identifier;
    }
}
